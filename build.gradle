import groovy.json.JsonSlurper

buildscript {
  ext.shadowPluginVersion = '1.2.3'
  ext.kotlinVersion = '1.0.4'

  repositories {
    jcenter()
  }

  dependencies {
    classpath "com.github.jengelman.gradle.plugins:shadow:${shadowPluginVersion}"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
  }
}

apply plugin: 'com.github.johnrengelman.shadow'

if (!JavaVersion.current().java8Compatible) {
  throw new IllegalArgumentException('''A Haiku:
                                      |  This needs Java 8,
                                      |  You are using something else,
                                      |  Upgrade. Try again.'''.stripMargin())
}

// load the Datawirefile information into Gradle
def datawireInfo = new JsonSlurper().parse(file("Datawirefile"))

group   = 'com.github.plombardi89.pgnotify'
version = datawireInfo.service.version

ext {
  assertjVersion     = '3.5.1'
  junitVersion       = '4.12'
  logbackVersion     = '1.1.7'
  vertxVersion       = '3.3.3'
}

apply plugin: 'java'
apply plugin: 'kotlin'


repositories {
  jcenter()
  mavenLocal()
}

dependencies {
  compile group: "ch.qos.logback", name: "logback-classic", version: logbackVersion

  compile group: "io.vertx",       name: "vertx-core",        version: vertxVersion
  compile group: "io.vertx",       name: "vertx-web",         version: vertxVersion
  compile group: "io.vertx",       name: "vertx-jdbc-client", version: vertxVersion

  compile group: "org.jetbrains.kotlin",  name: "kotlin-stdlib",        version: kotlinVersion
  compile group: "org.jetbrains.kotlinx", name: "kotlinx-support-jdk8", version: "0.3"
  compile group: 'org.postgresql',        name: 'postgresql',           version: '9.4.1211'

  testCompile group: "io.vertx",    name: "vertx-unit",   version: vertxVersion
  testCompile group: 'org.assertj', name: 'assertj-core', version: assertjVersion
  testCompile group: 'junit',       name: 'junit',        version: junitVersion
}


// Ensures we always produce GZIP compressed tarballs.
tasks.withType(Tar) {
  compression = Compression.GZIP
}

// Make acquiring the Gradle wrapper painless.
task wrapper(type: Wrapper) {
  gradleVersion = '3.0'
}

shadowJar {
  classifier = 'fat'

  manifest {
    attributes 'Main-Class'    : 'io.vertx.core.Launcher'
    attributes 'Main-Verticle' : "${project.group}.ServiceVerticle"
  }

  mergeServiceFiles {
    include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
  }
}
